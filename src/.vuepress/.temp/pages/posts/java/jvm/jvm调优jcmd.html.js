export const data = JSON.parse("{\"key\":\"v-52577d81\",\"path\":\"/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jcmd.html\",\"title\":\"Jvm之jcmd\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Jvm之jcmd\",\"icon\":\"fire\",\"category\":[\"jvm\"],\"tag\":[\"JVM 性能分析\"],\"description\":\"1、JVM调优，性能分析命令 1、jcmd指令的命令格式为： jcmd pid [ options ] 1.1、 在JDK1.7以后，新增了一个命令行工具jcmd。它是一个多功能的工具，可以用来实现前面除了jstat之外所有命令的功能，比如用它来导出堆、内存使用、查看Java进程、导出线程信息、执行GC、JVM运行时间等。jcmd拥有jmap的大部分功能，并且官方也推荐使用jcmd命令代替jmap命令。 jcmd 15008 help # 查看jcmd支持的相关操作，如下图1 jcmd 15008 VM.uptime # 查看jvm启动时间 jcmd 15008 Thread.print # 打印线程堆栈信息 jcmd 15008 GC.class_histogram # 查看系统中类的统计信息 jcmd 15008 GC.heap_dump D:\\\\d.hprof # 和jmap dump 功能差不多，也会进行一次FGC？ jcmd 15008 VM.flags # 获取启动参数\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/chenweiquan-red/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jcmd.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"WQ-知识库\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Jvm之jcmd\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1、JVM调优，性能分析命令 1、jcmd指令的命令格式为： jcmd pid [ options ] 1.1、 在JDK1.7以后，新增了一个命令行工具jcmd。它是一个多功能的工具，可以用来实现前面除了jstat之外所有命令的功能，比如用它来导出堆、内存使用、查看Java进程、导出线程信息、执行GC、JVM运行时间等。jcmd拥有jmap的大部分功能，并且官方也推荐使用jcmd命令代替jmap命令。 jcmd 15008 help # 查看jcmd支持的相关操作，如下图1 jcmd 15008 VM.uptime # 查看jvm启动时间 jcmd 15008 Thread.print # 打印线程堆栈信息 jcmd 15008 GC.class_histogram # 查看系统中类的统计信息 jcmd 15008 GC.heap_dump D:\\\\d.hprof # 和jmap dump 功能差不多，也会进行一次FGC？ jcmd 15008 VM.flags # 获取启动参数\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Durant\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JVM 性能分析\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Jvm之jcmd\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Durant\\\",\\\"url\\\":\\\"https://www.wqknowledge.top/\\\"}]}\"]]},\"headers\":[{\"level\":3,\"title\":\"1、JVM调优，性能分析命令\",\"slug\":\"_1、jvm调优-性能分析命令\",\"link\":\"#_1、jvm调优-性能分析命令\",\"children\":[]}],\"readingTime\":{\"minutes\":1.41,\"words\":422},\"filePathRelative\":\"posts/java/jvm/jvm调优jcmd.md\",\"excerpt\":\"<h3> 1、JVM调优，性能分析命令</h3>\\n<h4> 1、jcmd指令的命令格式为： jcmd pid [ options ]</h4>\\n<p>1.1、 在JDK1.7以后，新增了一个命令行工具jcmd。它是一个多功能的工具，可以用来实现前面除了jstat之外所有命令的功能，比如用它来导出堆、内存使用、查看Java进程、导出线程信息、执行GC、JVM运行时间等。jcmd拥有jmap的大部分功能，并且官方也推荐使用jcmd命令代替jmap命令。</p>\\n<div class=\\\"language-bash line-numbers-mode\\\" data-ext=\\\"sh\\\"><pre class=\\\"language-bash\\\"><code> jcmd <span class=\\\"token number\\\">15008</span>  <span class=\\\"token builtin class-name\\\">help</span> <span class=\\\"token comment\\\"># 查看jcmd支持的相关操作，如下图1</span>\\n \\n jcmd <span class=\\\"token number\\\">15008</span> VM.uptime <span class=\\\"token comment\\\"># 查看jvm启动时间</span>\\n \\n jcmd <span class=\\\"token number\\\">15008</span> Thread.print <span class=\\\"token comment\\\"># 打印线程堆栈信息</span>\\n \\n jcmd <span class=\\\"token number\\\">15008</span> GC.class_histogram <span class=\\\"token comment\\\"># 查看系统中类的统计信息</span>\\n \\n jcmd <span class=\\\"token number\\\">15008</span> GC.heap_dump D:<span class=\\\"token punctuation\\\">\\\\</span>d.hprof <span class=\\\"token comment\\\"># 和jmap dump 功能差不多，也会进行一次FGC？</span>\\n \\n jcmd <span class=\\\"token number\\\">15008</span> VM.flags <span class=\\\"token comment\\\"># 获取启动参数</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
