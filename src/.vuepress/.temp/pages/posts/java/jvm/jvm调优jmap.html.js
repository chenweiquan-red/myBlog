export const data = JSON.parse("{\"key\":\"v-0a5ac2c2\",\"path\":\"/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jmap.html\",\"title\":\"Jvm之jmap\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Jvm之jmap\",\"icon\":\"fire\",\"category\":[\"jvm\"],\"tag\":[\"JVM 性能分析\"],\"description\":\"1、JVM调优，性能分析命令 1、jmap指令的命令格式为：jmap [options] pid 选项 说明 -heap 查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况 -histo 查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象并且会强制执行一次GC -dump 用jmap把进程内存使用情况dump到文件中，再用jhat分析查看，通常在写dump文件前会触发一次Full GC，所以dump文件里保存的都是Full GC后留下的对象信息 -dump:live 保存堆中存活对象 -clstats 显示Java堆中元空间的类加载器的统计信息 -finalizerinfo 显示在F-Queue中等待Finalizer线程执行finalize方法的对象 -F 当dump命令不响应的时候，可以强行dump\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://github.com/chenweiquan-red/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jmap.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"WQ-知识库\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Jvm之jmap\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1、JVM调优，性能分析命令 1、jmap指令的命令格式为：jmap [options] pid 选项 说明 -heap 查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况 -histo 查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象并且会强制执行一次GC -dump 用jmap把进程内存使用情况dump到文件中，再用jhat分析查看，通常在写dump文件前会触发一次Full GC，所以dump文件里保存的都是Full GC后留下的对象信息 -dump:live 保存堆中存活对象 -clstats 显示Java堆中元空间的类加载器的统计信息 -finalizerinfo 显示在F-Queue中等待Finalizer线程执行finalize方法的对象 -F 当dump命令不响应的时候，可以强行dump\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Durant\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JVM 性能分析\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Jvm之jmap\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Durant\\\",\\\"url\\\":\\\"https://www.wqknowledge.top/\\\"}]}\"]]},\"headers\":[{\"level\":3,\"title\":\"1、JVM调优，性能分析命令\",\"slug\":\"_1、jvm调优-性能分析命令\",\"link\":\"#_1、jvm调优-性能分析命令\",\"children\":[]},{\"level\":3,\"title\":\"2 jhat:JDK自带堆分析工具\",\"slug\":\"_2-jhat-jdk自带堆分析工具\",\"link\":\"#_2-jhat-jdk自带堆分析工具\",\"children\":[]}],\"readingTime\":{\"minutes\":1.9,\"words\":570},\"filePathRelative\":\"posts/java/jvm/jvm调优jmap.md\",\"excerpt\":\"<h3> 1、JVM调优，性能分析命令</h3>\\n<p>1、jmap指令的命令格式为：jmap [options] pid</p>\\n<table>\\n<thead>\\n<tr>\\n<th>选项</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>-heap</td>\\n<td>查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况</td>\\n</tr>\\n<tr>\\n<td>-histo</td>\\n<td>查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象并且会强制执行一次GC</td>\\n</tr>\\n<tr>\\n<td>-dump</td>\\n<td>用jmap把进程内存使用情况dump到文件中，再用jhat分析查看，通常在写dump文件前会触发一次Full GC，所以dump文件里保存的都是Full GC后留下的对象信息</td>\\n</tr>\\n<tr>\\n<td>-dump:live</td>\\n<td>保存堆中存活对象</td>\\n</tr>\\n<tr>\\n<td>-clstats</td>\\n<td>显示Java堆中元空间的类加载器的统计信息</td>\\n</tr>\\n<tr>\\n<td>-finalizerinfo</td>\\n<td>显示在F-Queue中等待Finalizer线程执行finalize方法的对象</td>\\n</tr>\\n<tr>\\n<td>-F</td>\\n<td>当dump命令不响应的时候，可以强行dump</td>\\n</tr>\\n</tbody>\\n</table>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
