export const pagesRoutes = [
  ["v-184f4da6","/intro.html",{"v":"/assets/images/cover3.jpg","e":"<h1> 介绍页</h1>\n<p>将你的个人介绍和档案放置在此处。</p>\n","y":"a","t":"介绍页","i":"circle-info"},[":md"]],
  ["v-8daa1a0e","/",{"y":"h","t":"项目主页","i":"home"},["/README.md"]],
  ["v-2e3eac9e","/slides.html",{"y":"s","t":"幻灯片页","i":"person-chalkboard"},[":md"]],
  ["v-4e65ec78","/demo/disable.html",{"c":["使用指南"],"g":["禁用"],"e":"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n","y":"a","t":"布局与功能禁用","i":"gears","O":3},[":md"]],
  ["v-c151bf32","/demo/encrypt.html",{"c":["使用指南"],"g":["文章加密"],"n":true,"y":"a","t":"密码加密的文章","i":"lock"},[":md"]],
  ["v-438ffe52","/demo/markdown.html",{"c":["使用指南"],"g":["Markdown"],"e":"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n","y":"a","t":"Markdown 展示","i":"fab fa-markdown","O":2},[":md"]],
  ["v-6e19edb7","/demo/page.html",{"a":"Ms.Hope","d":1577836800000,"l":"2020年1月1日","c":["使用指南"],"g":["页面配置","使用指南"],"u":true,"v":"/assets/images/cover1.jpg","e":"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n","y":"a","t":"页面配置","i":"file","O":1},[":md"]],
  ["v-1473bf53","/demo/",{"c":["使用指南"],"e":"<h2> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/demo/markdown.html\" target=\"blank\">Markdown 展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/page.html\" target=\"blank\">页面展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/disable.html\" target=\"blank\">禁用展示</a></p>\n</li>\n<li>\n<p><a href=\"/demo/encrypt.html\" target=\"blank\">加密展示</a></p>\n</li>\n</ul>","y":"a","t":"主要功能与配置演示","i":"laptop-code"},["/demo/README.md"]],
  ["v-3c86f090","/posts/wendang.html",{"e":"<h2> 功能亮点</h2>\n<h3> RocketMQ</h3>\n<ul>\n<li>\n<p><a href=\"/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/\" target=\"blank\">RocketMq技术内幕（底层存储结构，负载均衡，高可用原理）</a></p>\n</li>\n<li>\n<p><a href=\"/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/RocketMq%E4%B8%8EKafka%E9%80%89%E5%9E%8B.html\" target=\"blank\">RocketMq与Kafka选型(两种MQ的对比)</a></p>\n</li>\n</ul>","y":"a","t":"指南","i":"lightbulb"},[":md"]],
  ["v-6626ae84","/posts/zhinan.html",{"c":["使用指南"],"e":"<h2> 目录</h2>\n<ul>\n<li><a href=\"/posts/DesignPattern/encrypt.html\" target=\"blank\">加密展示</a></li>\n</ul>\n","y":"a","t":"精选内容","i":"laptop-code","I":0},[":md"]],
  ["v-14583d80","/posts/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hbase%E5%85%A5%E9%97%A8.html",{"c":["大数据"],"g":["hbase,nosql"],"e":"<h1> Hbase 简单介绍</h1>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># hbase常用命令</span>\n create_namespace  <span class=\"token string\">'**'</span> <span class=\"token comment\"># 创建命名空间</span>\n drop_namespace <span class=\"token string\">'**'</span> <span class=\"token comment\"># 删除命名空间</span>\n list_namespace  <span class=\"token comment\"># 查询所有命名空间</span>\n list_namespace_tables <span class=\"token string\">'**'</span>  <span class=\"token comment\"># 查看命名空间下的表</span>\n \n create <span class=\"token string\">'wquser'</span>, <span class=\"token string\">'info'</span>, <span class=\"token string\">'data'</span> <span class=\"token comment\"># 创建表</span>\n create <span class=\"token string\">'wq:wquser1'</span>, <span class=\"token string\">'info'</span>, <span class=\"token string\">'data'</span> <span class=\"token comment\"># 创建命名空间下的表</span>\n put <span class=\"token string\">'wquser'</span>, <span class=\"token string\">'tom'</span>, <span class=\"token string\">'22age'</span> <span class=\"token comment\"># 插入数据</span>\n put <span class=\"token string\">'user'</span>, <span class=\"token string\">'rk0001'</span>, <span class=\"token string\">'info:name'</span>\n \n \n  create <span class=\"token string\">'SYSTEM:wquser2'</span>, <span class=\"token string\">'info'</span>, <span class=\"token string\">'data'</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Hbase 入门","i":"fire"},["/posts/大数据/Hbase入门.html","/posts/大数据/Hbase入门.md",":md"]],
  ["v-55e1b348","/posts/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9D%82%E8%B0%88.html",{"e":"<h3> 1、大数据在物联网行业的应用</h3>\n<pre><code>目前应用主要是物联网周报，日报，月报，当然也有各种大屏展示及可视化报表。\n</code></pre>\n<h3> 2、大数据之实时数仓，离线数仓</h3>\n<h5> 2.1、实时数仓所用技术栈链路一般是：flinkCDC/kafka--flink--&gt;hbase/hive</h5>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>dataflow:数据流动，有向无环图，也称为逻辑图\nflink 的dataflow大概为：source ---&gt; transformate ---&gt; sink\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"大数据杂谈","i":"fire"},["/posts/大数据/大数据杂谈.html","/posts/大数据/大数据杂谈.md",":md"]],
  ["v-2ab5d7d0","/posts/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BACDH6.html",{"e":"<h3> 1、搭建前规划</h3>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>hostname</th>\n<th>ip</th>\n<th>角色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CentOS7.9(64位)</td>\n<td>master</td>\n<td>192.168.10.249</td>\n<td>主节点</td>\n</tr>\n<tr>\n<td>CentOS7.9(64位)</td>\n<td>slave01</td>\n<td>192.168.10.253</td>\n<td>从节点</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"离线搭建CDH6.2.0","i":"fire"},["/posts/大数据/离线搭建CDH6.html","/posts/大数据/离线搭建CDH6.md",":md"]],
  ["v-d9f9be26","/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/2.html",{"e":"<h2> 功能亮点</h2>\n","y":"a","t":"记录完整项目","i":"lightbulb"},["/posts/开源项目/2.html","/posts/开源项目/2.md",":md"]],
  ["v-b0139926","/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/OFFLINE-MAP.html",{"e":"<h3> OFFLINE-MAP是一个离线地图</h3>\n<h4> 百度离线地图</h4>\n<h2> Getting started</h2>\n<p>1、先下载全能电子地图下载器，链接：<a href=\"https://pan.baidu.com/s/1w3RB-4i1dLKgXcaVtY8NhA?pwd=c0b7\" target=\"_blank\" rel=\"noopener noreferrer\">https://pan.baidu.com/s/1w3RB-4i1dLKgXcaVtY8NhA?pwd=c0b7</a></p>\n<p>2、选择地图，选择对应的平台，百度、高德、谷歌地图，选择地图级别。<br>\n比如：百度地图，地图级别是3-19级，一般下载17级，从19-3地图比例分别是：20米（19级），50米（18级），100米（17级）<br>\n<img src=\"https://wqknowledge.oss-cn-shenzhen.aliyuncs.com/blog/map.png\" alt=\"\" loading=\"lazy\"></p>","y":"a","t":"OFFLINE-MAP","i":"fire"},["/posts/开源项目/OFFLINE-MAP.html","/posts/开源项目/OFFLINE-MAP.md",":md"]],
  ["v-21387464","/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/VEDIO.html",{"e":"<h3> 1、CWQ-VEDIO是一个流媒体服务的管理端</h3>\n<p>github地址：<a href=\"https://github.com/chenweiquan-red/cwq-vedio.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/chenweiquan-red/cwq-vedio.git</a></p>\n<p>fork from : <a href=\"https://gitee.com/pan648540858/wvp-GB28181-pro.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/pan648540858/wvp-GB28181-pro.git</a></p>","y":"a","t":"VEDIO视频服务","i":"fire"},["/posts/开源项目/VEDIO.html","/posts/开源项目/VEDIO.md",":md"]],
  ["v-33037841","/posts/java/java8/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",{"e":"<h3> 1、函数式编程进阶用法</h3>\n","y":"a","t":"函数式编程","i":"circle-info"},["/posts/java/java8/函数式编程.html","/posts/java/java8/函数式编程.md",":md"]],
  ["v-1a9838da","/posts/java/jvm/Jvm%E5%A0%86%E5%86%85%E5%AD%98.html",{"c":["jvm"],"g":["Jvm堆内存"],"e":"<h1> 1、Jvm堆内存</h1>\n<h3> 1.1、内存参数设置</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>jvm 内存主要是堆内存，存储对象。堆内存主要由新生代和老年代组成。\n新生代：Eden, S0(from), S1(to)\n老年代：Old/Tenured\n\n新生代老年代默认比例：-XX：NewRatio = 2，表示新生代占1，老年代占2\n新生代中E,S,S 大概比例为：6:1:1（不一定，会自动调整）\n\n常用的JVM设置参数：Xms（初始）,Xmx（最大） 主要是指堆内存的空间。\n一般初始：1/64物理内存\n一般最大：1/4物理内存\n注意：生产一般会设置成一样的，主要是缓解内存伸缩带来额外的开销。\n\n\nEden发生YoungGC、MinorGC,\n第一次发生GC，对象由Eden回收，没有回收到的就移动到S0（对象计数1）\n\n第二次发生GC，对象从Eden/S0移动到 S1，这时候S0、Eden没有数据，S1有数据（对象计数 + 1）\n\n第三次发生GC，对象从S1移动到S0，计数+1\n\n...\n次数达到15次就进入Old区\n\nOld区满，发生FullGc\n\nFullGc后内存还是不够发生OOM\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Jvm堆内存","i":"fire"},["/posts/java/jvm/Jvm堆内存.html","/posts/java/jvm/Jvm堆内存.md",":md"]],
  ["v-39f91aea","/posts/java/jvm/jvm%E7%AE%80%E4%BB%8B.html",{"c":["jvm"],"g":["Jvm简介"],"e":"<h3> 1、JVM内存分布（1.8）</h3>\n<p>1、内存模型</p>\n<pre><code>程序计数器：保存当前线程执行的字节码位置\n堆：存放对象的实例，没有空间，会抛出OOM异常\n栈、虚拟机栈：存放局部变量，动态链接，操作栈，方法出口等信息，调用方法都会创建栈\n本地方法栈：和虚拟机栈基本相同，但是本地是指native方法\n\n以下两个不在JVM虚拟机中\n\n方法区：又称非堆区，存储类信息，常量，静态变量等数\n本地内存：分为元空间和直接内存\n元空间：1.7的永久代和1.8的元空间，是方法区的一种实现\n</code></pre>\n<p><img src=\"https://wqknowledge.oss-cn-shenzhen.aliyuncs.com/blog/jvm2.jpg\" alt=\"\" loading=\"lazy\"><br>\n2、GC</p>","y":"a","t":"Jvm简介","i":"fire"},["/posts/java/jvm/jvm简介.html","/posts/java/jvm/jvm简介.md",":md"]],
  ["v-52577d81","/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jcmd.html",{"c":["jvm"],"g":["JVM 性能分析"],"e":"<h3> 1、JVM调优，性能分析命令</h3>\n<h4> 1、jcmd指令的命令格式为： jcmd pid [ options ]</h4>\n<p>1.1、 在JDK1.7以后，新增了一个命令行工具jcmd。它是一个多功能的工具，可以用来实现前面除了jstat之外所有命令的功能，比如用它来导出堆、内存使用、查看Java进程、导出线程信息、执行GC、JVM运行时间等。jcmd拥有jmap的大部分功能，并且官方也推荐使用jcmd命令代替jmap命令。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code> jcmd <span class=\"token number\">15008</span>  <span class=\"token builtin class-name\">help</span> <span class=\"token comment\"># 查看jcmd支持的相关操作，如下图1</span>\n \n jcmd <span class=\"token number\">15008</span> VM.uptime <span class=\"token comment\"># 查看jvm启动时间</span>\n \n jcmd <span class=\"token number\">15008</span> Thread.print <span class=\"token comment\"># 打印线程堆栈信息</span>\n \n jcmd <span class=\"token number\">15008</span> GC.class_histogram <span class=\"token comment\"># 查看系统中类的统计信息</span>\n \n jcmd <span class=\"token number\">15008</span> GC.heap_dump D:<span class=\"token punctuation\">\\</span>d.hprof <span class=\"token comment\"># 和jmap dump 功能差不多，也会进行一次FGC？</span>\n \n jcmd <span class=\"token number\">15008</span> VM.flags <span class=\"token comment\"># 获取启动参数</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Jvm之jcmd","i":"fire"},["/posts/java/jvm/jvm调优jcmd.html","/posts/java/jvm/jvm调优jcmd.md",":md"]],
  ["v-a0d678ee","/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jinfo.html",{"c":["jvm"],"g":["JVM 性能分析"],"e":"<h3> 1、JVM调优，性能分析命令</h3>\n<p>1、jinfo指令的命令格式为： jinfo  [ options ] pid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>no option</td>\n<td>输出所有的参数和系统属性，包括默认值</td>\n</tr>\n<tr>\n<td>-flag name</td>\n<td>输出对应名称的参数</td>\n</tr>\n<tr>\n<td>-flag [+-]name</td>\n<td>开启或者关闭对应参数名称的参数，只有标记为manageable 的参数才可以被动态修改</td>\n</tr>\n<tr>\n<td>-flag name=value</td>\n<td>修改对应参数的值</td>\n</tr>\n<tr>\n<td>-flags</td>\n<td>输出全部的参数</td>\n</tr>\n<tr>\n<td>-sysprops</td>\n<td>输出系统属性，system.getProperties()</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"Jvm之jinfo","i":"fire"},["/posts/java/jvm/jvm调优jinfo.html","/posts/java/jvm/jvm调优jinfo.md",":md"]],
  ["v-0a5ac2c2","/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jmap.html",{"c":["jvm"],"g":["JVM 性能分析"],"e":"<h3> 1、JVM调优，性能分析命令</h3>\n<p>1、jmap指令的命令格式为：jmap [options] pid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-heap</td>\n<td>查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况</td>\n</tr>\n<tr>\n<td>-histo</td>\n<td>查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象并且会强制执行一次GC</td>\n</tr>\n<tr>\n<td>-dump</td>\n<td>用jmap把进程内存使用情况dump到文件中，再用jhat分析查看，通常在写dump文件前会触发一次Full GC，所以dump文件里保存的都是Full GC后留下的对象信息</td>\n</tr>\n<tr>\n<td>-dump:live</td>\n<td>保存堆中存活对象</td>\n</tr>\n<tr>\n<td>-clstats</td>\n<td>显示Java堆中元空间的类加载器的统计信息</td>\n</tr>\n<tr>\n<td>-finalizerinfo</td>\n<td>显示在F-Queue中等待Finalizer线程执行finalize方法的对象</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>当dump命令不响应的时候，可以强行dump</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"Jvm之jmap","i":"fire"},["/posts/java/jvm/jvm调优jmap.html","/posts/java/jvm/jvm调优jmap.md",":md"]],
  ["v-2a2cfc73","/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jstack.html",{"c":["jvm"],"g":["JVM 性能分析"],"e":"<h3> 1、JVM调优，性能分析命令</h3>\n<h4> 1、jstack指令的命令格式为：jstack [ option ] pid</h4>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>不影响当前请求情况下，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除了堆栈外，显示关于锁的附加信息</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>如果调用本地方法，可以显示C/C++的堆栈信息</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>获取帮助</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"Jvm之jstack","i":"fire"},["/posts/java/jvm/jvm调优jstack.html","/posts/java/jvm/jvm调优jstack.md",":md"]],
  ["v-2cdd8cba","/posts/java/jvm/jvm%E8%B0%83%E4%BC%98jstat.html",{"c":["jvm"],"g":["JVM 性能分析"],"e":"<h3> 1、JVM调优，性能分析命令</h3>\n<p>1、jstat指令的命令格式为：jstat [options] pid [interval] [count]</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-gc</td>\n<td>统计垃圾回收的堆信息，单位为空间字节数，即单位为KB</td>\n</tr>\n<tr>\n<td>-gcutil</td>\n<td>统计垃圾回收的堆信息，单位为空间的百分比</td>\n</tr>\n<tr>\n<td>-class</td>\n<td>统计类加载器的信息</td>\n</tr>\n<tr>\n<td>-compile</td>\n<td>统计编译行为信息</td>\n</tr>\n<tr>\n<td>-gccapacity</td>\n<td>统计不同区域（新生代、老年代、永久代）的堆容量信息</td>\n</tr>\n<tr>\n<td>-gccause</td>\n<td>统计引起垃圾回收的事件</td>\n</tr>\n<tr>\n<td>-gcnew</td>\n<td>统计垃圾回收时，新生代的情况</td>\n</tr>\n<tr>\n<td>-gcnewcapacity</td>\n<td>统计垃圾回收时，新生代堆空间容量</td>\n</tr>\n<tr>\n<td>-gcold</td>\n<td>统计垃圾回收时，老年代的情况</td>\n</tr>\n<tr>\n<td>-gcoldcapacity</td>\n<td>统计垃圾回收时，老年代堆空间容量</td>\n</tr>\n<tr>\n<td>-gcpermcapacity</td>\n<td>统计垃圾回收时，永久代的堆空间容量</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"Jvm之jstat","i":"fire"},["/posts/java/jvm/jvm调优jstat.html","/posts/java/jvm/jvm调优jstat.md",":md"]],
  ["v-147bdc25","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/netty/netty%E5%88%9D%E5%AD%A6.html",{"c":["netty"],"g":["netty 入门"],"e":"<h3> netty入门(来源于：《Netty权威指南》)</h3>\n<h4> 1、NIO/BIO/伪异步IO/AIO/NIO2.0 区别</h4>\n<h4> 1.1、BIO，同步阻塞IO，典型代表为：TimeServer</h4>\n<p>BIO流程图：<br>\n<img src=\"https://wqknowledge.oss-cn-shenzhen.aliyuncs.com/netty/BIO.png\" alt=\"\" loading=\"lazy\"></p>\n<h4> 1.2、伪异步IO</h4>\n<p>为了解决BIO的弊端，后面加了个线程池来优化，形成M个请求对应N个后端线程，M可以远大于N。<br>\n伪异步IO流程图：</p>","y":"a","t":"Netty 入门","i":"fire"},["/posts/中间件/netty/netty初学.html","/posts/中间件/netty/netty初学.md",":md"]],
  ["v-0d5e2b1b","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/netty/netty%E8%BF%9B%E9%98%B6.html",{"c":["netty"],"g":["netty 入门"],"e":"<h3> netty入门(来源于：《Netty权威指南》)</h3>\n<h4> 1、NIO/BIO/伪异步IO/AIO/NIO2.0 区别</h4>\n<h4> 1.1、BIO，同步阻塞IO，典型代表为：TimeServer</h4>\n<p>BIO流程图：<br>\n<img src=\"https://wqknowledge.oss-cn-shenzhen.aliyuncs.com/netty/BIO.png\" alt=\"\" loading=\"lazy\"></p>\n<h4> 1.2、伪异步IO</h4>\n<p>为了解决BIO的弊端，后面加了个线程池来优化，形成M个请求对应N个后端线程，M可以远大于N。<br>\n伪异步IO流程图：</p>","y":"a","t":"Netty 入门","i":"fire"},["/posts/中间件/netty/netty进阶.html","/posts/中间件/netty/netty进阶.md",":md"]],
  ["v-e8653bfa","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/MQ%E7%AD%94%E7%96%91.html",{"c":["RocketMQ"],"g":["答疑"],"e":"<h2> RocketMq技术答疑</h2>\n<h3> 1、NS之间的最终一致性，提高集群的稳定性。</h3>\n<blockquote>\n<p>[!important]<br>\nRocketMQ集群一般是指broker集群，但是为了防止NS也宕机，所以NS也是可以做集群。<br>\n那么多个NS和Broker之间的关系是怎么样的呢？是不是不同集群节点下的broker都需要连接到所有的NS上呢？</p>\n</blockquote>\n<h3> 2、RocketMQ如何保证顺序消费？</h3>\n<blockquote>\n<p>[!important]<br>\n1、照全局角度顺序消费分为全局和局部，全局就topic只有一个queue,topic如果有多个queue, 那可能只能局部顺序。<br>\n实际的业务场景来说，顺序都是指的局部顺序，比如相同的订单，相同的运输任务 ID取模后，让相同的需要顺序<br>\n消费的数据落入到同一个queue中。<br>\n源码地址：org.apache.rocketmq.client.impl.producer.DefaultMQProducerImpl#sendSelectImpl</p>\n<p>2、如果按照生产者消费者角度，分为生产有序和消费有序，生产有序是生产者把数据落入到同一个queue下，消费有序是指<br>\n有序消费模式MessageListenerOrderly和并发消费模式MessageListenerConcurrently，<br>\n简单来说就是消费的时候是单线程还是多线程消费，需要进行控制，以达到顺序消费的目的。</p>\n</blockquote>","y":"a","t":"RocketMQ 答疑","i":"fire"},["/posts/中间件/rocketmq/MQ答疑.html","/posts/中间件/rocketmq/MQ答疑.md",":md"]],
  ["v-770ec5d5","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/MQ%E9%80%89%E5%9E%8B.html",{"c":["RocketMQ"],"g":["选型"],"e":"<h1> RocketMq与Kafka选型</h1>\n<h3> RocketMq与Kafka选型</h3>\n<pre><code>01.两者的相同点\n02.部署架构不同\n03.工作流程不同\n04.日志存储方式不同\n05.保证消息顺序消息的方法是否相同\n06.消息重复机制不同\n07.是否支持延时消息\n08.消息过滤方式不同\n09.消息失败支持重试吗？\n10.事务不同\n11.是否支持回溯消费？\n12.高可用机制不同\n13.性能不同？\n14.社区活跃度\n15.其他方面不同\n</code></pre>\n<p>首先来看看两者的相同之处</p>\n<h4> 01.两者的相同点</h4>\n<pre><code>两者底层原理有很多相似之处，RocketMQ借鉴了Kafka的设计\n两者均采用顺序写、零拷贝机制进行写消息与发送消息，极大地保证了系统的性能\n</code></pre>","y":"a","t":"RocketMQ 选型","i":"fire"},["/posts/中间件/rocketmq/MQ选型.html","/posts/中间件/rocketmq/MQ选型.md",":md"]],
  ["v-f5f52750","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95.html",{"c":["RocketMQ"],"g":["技术内幕"],"e":"<h2> RocketMq技术内幕</h2>\n<h3> 1、rocketmq路由中心ns以及broker之间的联系</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>    rocketmq集群一般是指broker的集群，每个br都会连接到NS上，br和ns是长连接，10s心跳，\n    生产者和消费者需要先从ns中获取到实际的broker才进行消息发送及消费。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"RocketMQ 内幕","i":"fire"},["/posts/中间件/rocketmq/技术内幕.html","/posts/中间件/rocketmq/技术内幕.md",":md"]],
  ["v-23454630","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/utility/Smart-doc.html",{"c":["utillity"],"g":["文档"],"e":"<h3> smart-doc是一个无侵入性的框架</h3>\n<h3> 1、简述</h3>\n<p>完全基于接口源码来分析生成接口文档，不采用任何注解侵入到业务代码中。你只需要按照 java-doc 标准编写注释， smart-doc<br>\n就能帮你生成一个简易明了的 markdown, html, doc, openai, postman, swagger, torna 等类型的文档。官方文档地址：<br>\n<a href=\"https://smart-doc-group.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">https://smart-doc-group.github.io</a></p>","y":"a","t":"smart-doc","i":"fire"},["/posts/中间件/utility/Smart-doc.html","/posts/中间件/utility/Smart-doc.md",":md"]],
  ["v-f5a36842","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/utility/vsftp.html",{"c":["utility"],"g":["文档"],"e":"<h3> vsftp 简单介绍</h3>\n<h4> vsftp 有三种用户模式</h4>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 首先安装ftp环境</span>\nyum <span class=\"token function\">install</span> vsftpd\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"vsftp搭建","i":"fire"},["/posts/中间件/utility/vsftp.html","/posts/中间件/utility/vsftp.md",":md"]],
  ["v-7a9c31a0","/posts/%E8%BF%90%E7%BB%B4/centos/centos%E7%BD%91%E7%BB%9C%E6%95%85%E9%9A%9C%E5%88%86%E6%9E%90.html",{"c":["Centos"],"g":["Centos 网络"],"e":"<h3> 1、认识network和NetworkManager</h3>\n<p>先说结论，在CentOS系统中，network服务和NetworkManager是两个常用的网络管理工具，它们之间有一定的关系，但是也有区别：</p>\n<div class=\"language-textmate line-numbers-mode\" data-ext=\"textmate\"><pre class=\"language-textmate\"><code>network：network服务是在CentOS 6及更早版本中使用的传统网络管理方式。它使用\n/etc/sysconfig/network-scripts/目录下的配置文件来管理网络接口和网络设置。\n通过编辑这些配置文件，您可以手动配置网络接口、IP地址、网关、DNS等网络参数。\nnetwork服务提供了较为底层的网络管理功能，适用于服务器环境或不需要频繁变动网络配置的情况。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Centos 网络故障分析","i":"fire"},["/posts/运维/centos/centos网络故障分析.html","/posts/运维/centos/centos网络故障分析.md",":md"]],
  ["v-00c20287","/posts/%E8%BF%90%E7%BB%B4/centos/",{"e":"<h3> centos 系统磁盘，分区，逻辑分区等小常识</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>lsblk <span class=\"token comment\"># 查看所有的存储设备，包括硬盘，扩展硬盘</span>\n\n<span class=\"token comment\">#一般情况下, 存在sda,sdb两块硬盘, 如下图1所示有sda硬盘, 和两个逻辑分区cl-home,cl-root</span>\n\n<span class=\"token function\">fdisk</span> /dev/sdb <span class=\"token comment\"># 表示对硬盘sdb进行分区（因为目前还没有新增硬盘的需求和经验，这里不做详细介绍）</span>\n\n<span class=\"token function\">fdisk</span> <span class=\"token parameter variable\">-l</span> /dev/sdb <span class=\"token comment\"># 表示查看该硬盘的分区状态</span>\n\nmkfs.xfs /dev/sdb1 <span class=\"token comment\"># 表示格式化分区，这个命令要慎用！</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"centos","i":"lightbulb"},["/posts/运维/centos/","/posts/运维/centos/README.md","/posts/%E8%BF%90%E7%BB%B4/centos/README.md"]],
  ["v-232184c2","/posts/%E8%BF%90%E7%BB%B4/devops/Docker%E9%95%9C%E5%83%8F.html",{"e":"<h1> Docker镜像</h1>\n<h3> 1、具体的文件格式</h3>\n<p>Dockerfile标准格式如下：</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><pre class=\"language-docker\"><code><span class=\"token comment\"># 底座，可以理解为运行环境</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> livingobjects/jre8</span>\n\n<span class=\"token comment\"># 镜像作者</span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> maintainer chenweiquan</span>\n\n<span class=\"token comment\"># 创建构建目录，注意是容器内目录</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir -p /hhd-link-iot-device/</span>\n\n<span class=\"token comment\"># 复制文件到容器内目录</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> ./hhd-link-iot-device/target/hhd-link-iot-device-1.0.0-SNAPSHOT.jar  /hhd-link-iot-device/</span>\n\n<span class=\"token comment\"># 工作空间</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /hhd-link-iot-device/</span>\n\n<span class=\"token comment\"># 声明暴露端口</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8000</span>\n\n<span class=\"token comment\"># 实际执行指令</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [ <span class=\"token string\">\"sh\"</span>, <span class=\"token string\">\"-ec\"</span>, <span class=\"token string\">\"exec java ${JAVA_OPTS} -Xms1024m -Xmx2046m -Dfile.encoding=UTF-8 -Duser.timezone=GMT+08 -jar hhd-link-iot-device-1.0.0-SNAPSHOT.jar\"</span> ]</span>\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Docker镜像","i":"circle-info"},["/posts/运维/devops/Docker镜像.html","/posts/运维/devops/Docker镜像.md",":md"]],
  ["v-4cef7227","/posts/%E8%BF%90%E7%BB%B4/devops/Harbor%E9%83%A8%E7%BD%B2.html",{"e":"<h1> Harbor部署</h1>\n<h3> Harbor部署</h3>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token number\">1</span>、wget https://github.com/goharbor/harbor/releases/download/v2.8.0/harbor-offline-installer-v2.9.0.tgz\n\n<span class=\"token number\">2</span>、解压 <span class=\"token function\">tar</span> zxvf harbor-offline-installer-v2.9.0.tgz <span class=\"token parameter variable\">-C</span> /usr/local/harbor/\n\n<span class=\"token number\">3</span>、拷贝配置文件 <span class=\"token function\">cp</span> /usr/local/harbor/harbor/harbor.yml.tmpl /usr/local/harbor/harbor/harbor.yml\n\n<span class=\"token number\">4</span>、修改配置文件 <span class=\"token function\">vim</span> /opt/harbor/harbor.yml/usr/local/harbor/harbor/harbor.yml\n修改hostname 和 port\n注释https\n\n<span class=\"token number\">5</span>、启动\n./prepare\n./install.sh\n\nip:85\n账号admin，密码Harbor12345\n\n<span class=\"token number\">6</span>、docker配置文件中配置仓库地址 /etc/docker/daemon.conf 中加入：\n\n<span class=\"token function\">cat</span> <span class=\"token operator\">&gt;</span> /etc/docker/daemon.conf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n    {\n    \"registry-mirrors\": [\n    \"https://jkgtnyi7.mirror.aliyuncs.com\",\n    \"https://registry.docker-cn.com\",\n    \"http://hub-mirror.c.163.com\",\n    \"https://docker.mirrors.ustc.edu.cn\"\n    ],\n    \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n    \"max-size\": \"100m\"\n    },\n    \"insecure-registries\": [\"192.168.10.250:85\"]\n    }\nEOF</span>\n\n<span class=\"token number\">7</span>、修改docker 配置文件 <span class=\"token function\">vim</span>  /usr/lib/systemd/system/docker.service\n\n在ExecStart<span class=\"token operator\">=</span>/usr/bin/dockerd后面加：\n--insecure-registry <span class=\"token number\">192.168</span>.10.250:85 <span class=\"token punctuation\">\\</span>\n\n<span class=\"token number\">8</span>、重启docker\nsystemctl daemon-reload <span class=\"token operator\">&amp;&amp;</span> systemctl restart <span class=\"token function\">docker</span>\n\n\n\n\n\n\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Harbor部署","i":"circle-info"},["/posts/运维/devops/Harbor部署.html","/posts/运维/devops/Harbor部署.md",":md"]],
  ["v-a24d3496","/posts/%E8%BF%90%E7%BB%B4/devops/Helm%E9%83%A8%E7%BD%B2.html",{"e":"<h1> Helm部署</h1>\n<h3> Helm部署</h3>\n<h3> 1、搭建过程</h3>\n<p>搭建篇主要介绍Helm，chart仓库chartmuseum 等环境的搭建。 Helm主要分为服务端Tiller和客户端,<br>\n客户端负责Chart/Release应用创建和发布，服务端负责在K8S集群内运行创建容器等。</p>\n<p>Helm搭建过程：</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>  <span class=\"token number\">1</span>. 从 https://github.com/helm/helm/releases 下载 helm-v3.12.2-linux-amd64.tar.gz\n\n  <span class=\"token number\">2</span>. 解压\n  <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> helm-v3.12.2-linux-amd64.tar.gz\n    \n  <span class=\"token number\">3</span>. 移动\n    <span class=\"token function\">mv</span>  linux-amd64/helm  /usr/local/bin/helm \n    \n  查看版本: helm version\n    \n  <span class=\"token number\">4</span>. 仓库配置\n    //添加常用的 chart 仓库\n    helm repo <span class=\"token function\">add</span> bitnami https://charts.bitnami.com/bitnami\n    helm repo <span class=\"token function\">add</span> aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts\n    helm repo <span class=\"token function\">add</span> incubator https://charts.helm.sh/incubator \n     \n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Helm部署","i":"circle-info"},["/posts/运维/devops/Helm部署.html","/posts/运维/devops/Helm部署.md",":md"]],
  ["v-ada5e9c2","/posts/%E8%BF%90%E7%BB%B4/devops/Jenkins-slave%E9%83%A8%E7%BD%B2.html",{"e":"<h1> Jenkins-slave部署</h1>\n<h3> Jenkins-slave部署</h3>\n<h3> 1、jenkins-slave 镜像构建及推送到私有镜像仓库(看情况选择是否需要用到)</h3>\n<p>jenkins-slave Dockerfile</p>\n<div class=\"language-docker line-numbers-mode\" data-ext=\"docker\"><pre class=\"language-docker\"><code><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> centos:7</span>\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> maintainer chenweiquan</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> yum install -y java-1.8.0-openjdk maven curl git libtool-ltdl-devel &amp;&amp; <span class=\"token operator\">\\</span>\nyum clean all &amp;&amp; <span class=\"token operator\">\\</span>\nrm -rf /var/cache/yum/* &amp;&amp; <span class=\"token operator\">\\</span>\nmkdir -p /usr/share/jenkins</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> agent.jar /usr/share/jenkins/agent.jar</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> jenkins-agent /usr/bin/jenkins-agent</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> settings.xml /etc/maven/settings.xml</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> chmod +x /usr/bin/jenkins-agent</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> helm kubectl /usr/bin/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [<span class=\"token string\">\"jenkins-agent\"</span>]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Jenkins-slave部署","i":"circle-info"},["/posts/运维/devops/Jenkins-slave部署.html","/posts/运维/devops/Jenkins-slave部署.md",":md"]],
  ["v-6fce4bfc","/posts/%E8%BF%90%E7%BB%B4/devops/Jenkins%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.html",{"e":"<h1> Jenkins部署及使用</h1>\n<h2> 安装部署</h2>\n<p>基本要求：安装部署前需要先安装JDK1.8, git, maven, docker, docker-compose 等环境</p>\n<div class=\"language-xml line-numbers-mode\" data-ext=\"xml\"><pre class=\"language-xml\"><code>    通过docker-compose方式安装jenkins， 好处是不需要关心 jenkins 的版本，需要的jdk,git,maven等插件都和物理机解耦\n    另一个原因是 jenkins 只有最新的几个版本才支持在线安装插件，如果用低级传统的部署方式，必须要找到离线安装需要的所有插件\n    才能正常使用。\n\n    docker-compose.yml 内容如下：（注意：maven/jdk/git等路径的映射要和物理机的路径要对应）\n        \n    version: '3.8'\n    services:\n     docker_jekins_2.378:\n      image: jenkins/jenkins:2.378-jdk11\n      container_name: docker_jekins_2.378\n      user: root\n      ports:\n        - \"8081:8080\"\n      expose:\n        - \"50000\"\n        - \"8080\"\n      privileged: true\n      restart: unless-stopped\n      volumes:\n        - ./jenkins_data:/var/jenkins_home\n        - /usr/local/maven/apache-maven-3.6.3:/usr/local/mymaven\n        - /usr/local/java/jdk1.8.0_281:/usr/local/jdk\n        - /usr/bin/git:/usr/local/git\n\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"Jenkins部署及使用","i":"circle-info"},["/posts/运维/devops/Jenkins部署及使用.html","/posts/运维/devops/Jenkins部署及使用.md",":md"]],
  ["v-3616b7b6","/posts/%E8%BF%90%E7%BB%B4/devops/",{"e":"<h2> 主要是Harbor，Helm，Docker等相关知识的分享</h2>\n","y":"a","t":"devops","i":"lightbulb"},["/posts/运维/devops/","/posts/运维/devops/README.md","/posts/%E8%BF%90%E7%BB%B4/devops/README.md"]],
  ["v-96f9b37c","/posts/%E8%BF%90%E7%BB%B4/k8s/K8s%E4%B9%8Bpvc.html",{"e":"<h1> K8s之pvc</h1>\n<h3> 官方解释</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>PVC 的全称是：PersistentVolumeClaim（持久化卷声明），PVC 是用户存储的一种声明，\nPVC 和 Pod 比较类似，Pod 消耗的是节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 和内存，而 PVC 可以请求特定的存储空间和访问模式。\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","y":"a","t":"K8s之pvc","i":"fire"},["/posts/运维/k8s/K8s之pvc.html","/posts/运维/k8s/K8s之pvc.md",":md"]],
  ["v-3d6822ac","/posts/%E8%BF%90%E7%BB%B4/k8s/K8s%E4%B9%8Bservice.html",{"e":"<h1> K8s之service</h1>\n<h4> 1、官方解释:</h4>\n<p>Kubernetes Service定义了这样一种抽象： Service是一种可以访问 Pod逻辑分组的策略， Service通常是通过 Label Selector访问 Pod组。<br>\nService能够提供负载均衡的能力，但是在使用上有以下限制：只提供 4 层负载均衡能力，而没有 7 层功能，但有时我们可能需要更多的匹配规则来转发请求，这点上 4 层负载均衡是不支持的</p>\n<p>通俗来说：pod Ip是不固定的，集群后会随机均衡落在每个node上，所以需要统一一个入口，如果该服务需要负载均衡，那就是定义为service, service是一个服务多个<br>\npod的集合。</p>","y":"a","t":"K8s之service","i":"circle-info"},["/posts/运维/k8s/K8s之service.html","/posts/运维/k8s/K8s之service.md",":md"]],
  ["v-3461901d","/posts/%E8%BF%90%E7%BB%B4/k8s/K8s%E7%BD%91%E7%BB%9C%E7%AF%87.html",{"e":"<h1> K8s网络篇</h1>\n<h3> k8s Pod网络</h3>\n<p>待补充...</p>\n","y":"a","t":"K8s网络篇","i":"circle-info"},["/posts/运维/k8s/K8s网络篇.html","/posts/运维/k8s/K8s网络篇.md",":md"]],
  ["v-663d999e","/posts/%E8%BF%90%E7%BB%B4/k8s/K8s%E9%97%AE%E9%A2%98%E7%AF%87.html",{"e":"<h1> K8s问题篇</h1>\n<h3> 所有遇到的问题集</h3>\n<h4> 1、通过 docker login -u admin -p Harbor12345 192.168.10.249:85 登录不上镜像仓库，报错 Error response from daemon:Get \"<a href=\"https://192.168.10.249:85/v2/\" target=\"_blank\" rel=\"noopener noreferrer\">https://192.168.10.249:85/v2/</a>\": http: server gave HTTP response to HTTPS client</h4>","y":"a","t":"K8s问题篇","i":"circle-info"},["/posts/运维/k8s/K8s问题篇.html","/posts/运维/k8s/K8s问题篇.md",":md"]],
  ["v-9744bfb6","/posts/%E8%BF%90%E7%BB%B4/k8s/",{"e":"<h2> 待补充...</h2>\n","y":"a","t":"k8s","i":"lightbulb"},["/posts/运维/k8s/","/posts/运维/k8s/README.md","/posts/%E8%BF%90%E7%BB%B4/k8s/README.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":""},[]],
  ["v-e1e3da16","/posts/",{"y":"p","t":"Posts"},[]],
  ["v-cf0cb8b4","/posts/%E5%A4%A7%E6%95%B0%E6%8D%AE/",{"y":"p","t":"大数据"},["/posts/大数据/"]],
  ["v-6c224d86","/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/",{"y":"p","t":"开源项目"},["/posts/开源项目/"]],
  ["v-51ed8f11","/posts/java/java8/",{"y":"p","t":"Java8"},[]],
  ["v-09041878","/posts/java/",{"y":"p","t":"Java"},[]],
  ["v-40051426","/posts/java/jvm/",{"y":"p","t":"Jvm"},[]],
  ["v-43fc1875","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/netty/",{"y":"p","t":"Netty"},["/posts/中间件/netty/"]],
  ["v-6dc3e230","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/",{"y":"p","t":"中间件"},["/posts/中间件/"]],
  ["v-41e135cf","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/",{"y":"p","t":"Rocketmq"},["/posts/中间件/rocketmq/"]],
  ["v-12c1432b","/posts/%E4%B8%AD%E9%97%B4%E4%BB%B6/utility/",{"y":"p","t":"Utility"},["/posts/中间件/utility/"]],
  ["v-f612ebc8","/posts/%E8%BF%90%E7%BB%B4/",{"y":"p","t":"运维"},["/posts/运维/"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":0},[]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":0},[]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":0},[]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":0},[]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":0},[]],
  ["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"使用指南 分类","I":0},["/category/使用指南/"]],
  ["v-83e1f92e","/tag/%E7%A6%81%E7%94%A8/",{"y":"p","t":"标签: 禁用","I":0},["/tag/禁用/"]],
  ["v-feb0f36e","/category/%E5%A4%A7%E6%95%B0%E6%8D%AE/",{"y":"p","t":"大数据 分类","I":0},["/category/大数据/"]],
  ["v-1e447d61","/tag/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/",{"y":"p","t":"标签: 文章加密","I":0},["/tag/文章加密/"]],
  ["v-65f163c6","/category/jvm/",{"y":"p","t":"jvm 分类","I":0},[]],
  ["v-484552dc","/tag/markdown/",{"y":"p","t":"标签: Markdown","I":0},[]],
  ["v-95e0c4b6","/category/netty/",{"y":"p","t":"netty 分类","I":0},[]],
  ["v-a378ad66","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{"y":"p","t":"标签: 页面配置","I":0},["/tag/页面配置/"]],
  ["v-1079629f","/category/rocketmq/",{"y":"p","t":"RocketMQ 分类","I":0},[]],
  ["v-7b167472","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"y":"p","t":"标签: 使用指南","I":0},["/tag/使用指南/"]],
  ["v-14248bd3","/category/utillity/",{"y":"p","t":"utillity 分类","I":0},[]],
  ["v-77457314","/tag/hbase_nosql/",{"y":"p","t":"标签: hbase,nosql","I":0},[]],
  ["v-e5ef874a","/category/utility/",{"y":"p","t":"utility 分类","I":0},[]],
  ["v-e88b363e","/tag/jvm%E5%A0%86%E5%86%85%E5%AD%98/",{"y":"p","t":"标签: Jvm堆内存","I":0},["/tag/jvm堆内存/"]],
  ["v-b2aa3dea","/category/centos/",{"y":"p","t":"Centos 分类","I":0},[]],
  ["v-e68789ee","/tag/jvm%E7%AE%80%E4%BB%8B/",{"y":"p","t":"标签: Jvm简介","I":0},["/tag/jvm简介/"]],
  ["v-8d35ec08","/tag/jvm-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/",{"y":"p","t":"标签: JVM 性能分析","I":0},["/tag/jvm-性能分析/"]],
  ["v-3694a3a0","/tag/netty-%E5%85%A5%E9%97%A8/",{"y":"p","t":"标签: netty 入门","I":0},["/tag/netty-入门/"]],
  ["v-42a85044","/tag/%E7%AD%94%E7%96%91/",{"y":"p","t":"标签: 答疑","I":0},["/tag/答疑/"]],
  ["v-786816a0","/tag/%E9%80%89%E5%9E%8B/",{"y":"p","t":"标签: 选型","I":0},["/tag/选型/"]],
  ["v-cd99abe2","/tag/%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/",{"y":"p","t":"标签: 技术内幕","I":0},["/tag/技术内幕/"]],
  ["v-7cfd563e","/tag/%E6%96%87%E6%A1%A3/",{"y":"p","t":"标签: 文档","I":0},["/tag/文档/"]],
  ["v-3c93afc8","/tag/centos-%E7%BD%91%E7%BB%9C/",{"y":"p","t":"标签: Centos 网络","I":0},["/tag/centos-网络/"]],
]
